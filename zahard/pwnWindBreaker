#! /usr/bin/env python3

# Date:         Sat Dec 25 11:26:29 PM CST 2021
# Description:  Download Wind Breaker chapters from zahard

# const
PROGRESS_MOD = 0
PROGRESS_TITLE = 'Downloading'

# modules
try:
    from bs4 import BeautifulSoup
except ModuleNotFoundError:
    print('[!] Missing module: pip install beautifulsoup4')
try:
    from pwn import *
except ModuleNotFoundError:
    try:
        import progressbar
        PROGRESS_MOD = 1
    except ModuleNotFoundError:
        PROGRESS_MOD = 2
try:
    import requests
except ModuleNotFoundError:
    print('[!] Missing module: pip install requests')
import shutil
import sys
import os

# functions
def print_custom(message, type=0):
    global PROGRESS_MOD
    '''
    type
        0: status
        1: error
        2: success
    progress_module
        0: pwn
        1: progressbar2
        2: built-in
    '''
    if PROGRESS_MOD == 0:       # pwn
        global p
        if type == 0:           # status
            p.status(message)
        elif type == 1:         # error
            p.failure(message)
        else:                   # success
            p.success(message)
    elif PROGRESS_MOD == 1:     # progressbar2
        global format_custom_text, bar
        if type == 0:           # status
            format_custom_text.update_mapping(msg=message)
            bar.update()
        elif type == 1:         # error
            format_custom_text.update_mapping(msg=message)
            bar.update()
            bar.finish()
        else:                   # success
            format_custom_text.update_mapping(msg=message)
            bar.update()
            bar.finish()
    else:                       # built-in
        os.system('clear|cls')
        if type == 0:           # status
            print('[+] {}: {}'.format(PROGRESS_TITLE, message))
        elif type == 1:         # error
            print('[!] {}: {}'.format(PROGRESS_TITLE, message))
        else:                   # success
            print('[*] {}: {}'.format(PROGRESS_TITLE, message))

# get downloaded chapters
start_point = 390
download_path = 'chapters'
downloaded = []

try:
    downloaded = os.listdir(download_path)
except FileNotFoundError:
    os.makedir(download_path)

# spider parameters
source = 'https://zahard.xyz/manga/41-wind-breaker' # https://manhwacity.com/manhwa/wind-breaker/
timeout = 15
chapter_filter = {'class': 'chapter-title-rtl'}
chapter_tag = {
    'tag': 'h5',
    'sub': 'a',
    'source': 'href'
}
tag_filter = {'class': 'img-responsive'}
html_tag = {
    'tag': 'img',
    'source': 'data-src'
}

r = requests.get(source, timeout=timeout)
bs = BeautifulSoup(r.text, 'html.parser')

available_chapters = []
for title in bs.find_all(chapter_tag['tag'], chapter_filter):
    for ref in title.find_all(chapter_tag['sub']):
        ch_number = ref[chapter_tag['source']].split('/')[-1]
        if int(ch_number) >= start_point:
            if ch_number in downloaded:
                continue
            available_chapters.append(ref[chapter_tag['source']])
available_chapters.sort()

if PROGRESS_MOD == 0:
    p = log.progress(PROGRESS_TITLE)
elif PROGRESS_MOD == 1:
    format_custom_text = progressbar.FormatCustomText(
        '%(msg)s',
        dict(
            msg="",
        ),
    )

    bar = progressbar.ProgressBar(widgets=[
        progressbar.AnimatedMarker(),
        " {}: ".format(PROGRESS_TITLE),
        format_custom_text,
    ])

if not available_chapters:
    print_custom('Up to date', type=-1)
    sys.exit(0)

# iterate chapters
for chapter in available_chapters:
    # get number
    chapter_number = chapter.split('/')[-1]

    # update status
    print_custom('Chapter {} - 0.00%'.format(chapter_number))

    # request connection to website
    try:
        r = requests.get(chapter, timeout=timeout)
    except:
        print_custom('Timeout in chapter url {}'.format(chapter), type=1)
        sys.exit(1)
    if not r.ok:
        print_custom('Connection error in chapter url {}'.format(chapter), type=1)
        sys.exit(1)

    # create folder for the chapter if not exists
    os.makedirs('{}/{}/'.format(download_path, chapter_number), exist_ok=True)

    # generate list of pages
    images = []
    bs = BeautifulSoup(r.text, 'html.parser')
    for img in bs.find_all(html_tag['tag'], tag_filter):
        try:
            images.append( img[html_tag['source']].strip() )
        except:
            pass

    # iterate pages
    for i, img_url in enumerate(images):
        # request image
        try:
            r = requests.get(img_url, timeout=timeout)
        except:
            print_custom('Timeout in page url {}'.format(img_url), type=1)
            # remove incomplete download
            shutil.rmtree('{}/{}'.format(download_path, chapter_number))
            sys.exit(1)
        if not r.ok:
            print_custom('Connection error in page url {}'.format(img_url), type=1)
            # remove incomplete download
            shutil.rmtree('{}/{}'.format(download_path, chapter_number))
            sys.exit(1)

        # download page
        with open('{}/{}/{:02}.jpg'.format(download_path, chapter_number, i+1), 'wb') as f:
            f.write(r.content)

        # update status
        total = len(images)
        print_custom('Chapter {} - {:.2f}%'.format( chapter_number, (i+1)/total*100 ))

print_custom('Done', type=-1)
